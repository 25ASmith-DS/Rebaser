package org.test;

public class Rebaser {

    //定义一个16进制字符的数组 下标为对应的字符
    static final char[] digits = {
        '0' , '1' , '2' , '3' , '4' , '5' ,
        '6' , '7' , '8' , '9' , 'a' , 'b' ,
        'c' , 'd' , 'e' , 'f'
    };

    private String v;

    public Rebaser(){
        v = "0";
    }

    public Rebaser(String value) {
        setValue(value);
    }

    public void setValue(String value) {
        if ( isValidNumber(value, 16)) {
            this.v = value;
        } else {
            this.v = "0";
        }
    }

    public String getValue() {
        return this.v;
    }

    /**
     * 将10进制的字符串 v 转换成指定的进指数据
     * @param toBase 指定的进制数 必须是2到16
     * @return String
     */
    public String convertToBaseN(int toBase) {

        //检查toBase 必须是2到16
        if ( toBase < 2 || toBase > 16 ) {
            return  "-1";
        }

        if ( isValidNumber(v, 10)) {
            //是10进制数据
            //TODO

            //将字符串转换成10进制整数
            //可以直接用 Integer.parserInt
//            int num = Integer.parseInt(v);
            int num = stringToInt(v,10);

            //可以直接用Integer.toString
//            String str = Integer.toString(num, toBase);
            String str = intToString(num, toBase);
            return str;
        } else {
            //不是10进制数据
            return "-1";
        }
    }

    /**
     * 将给定的字符串 v 按指定的进制转换成10进制的字符串
     * @param fromBase 指定的进制数 必须是2到16
     * @return String
     */
    public String convertToBaseTen(int fromBase) {
        if ( fromBase < 2 || fromBase > 16 ) {
            return  "-1";
        }
        if (isValidNumber(v, fromBase)) {
//            int num = Integer.parseInt(v, fromBase);
            int num = stringToInt(v, fromBase);

            return num + "";
        } else {
            return "-1";
        }
    }


    /**
     * 根据给定的整数和进制 转换成字符串
     * @param num  整型数
     * @param base 进制 2到16之间
     * @return String
     */
    private static String intToString(int num, int base) {
        //检查参数是否正确
        if (base < 2 || base > 16 ) {
            return  "-1";
        }

        if ( num < 0 ) {
            return  "-1";
        }

        //将num 赋给tmp
        // 用tmp除以base 取余 余数对应的字符为对应进制的编码。取商后赋给tmp继续除base
        // 一直循环下去 直到商为0

        int tmp = num;
        String str = "";
        while ( true ) {
            int n = tmp % base; //取余
            tmp = tmp / base; //取商

            if ( tmp <= 0 ) {
                str += digits[n];
                break;
            } else {
                str += digits[n];
            }
        }

        //反转字符串
        String str1 = "";
        int len = str.length();
        for (int i=0;i<len;i++) {
            str1 += str.charAt(len-i-1);
        }
        return str1;
    }



    /**
     * 将字符串 val 按指定的进制转换成整数
     * 该方法实现的替代啦 Integer.parseInt
     * @param val  字符串
     * @param base 进制数 2到16之间
     * @return int
     */
    private static int stringToInt(String val, int base) {
        //检查val 不能为null 长度必须大于0
        if ( val == null || val.length() == 0) {
            return 0;
        }

        //检查base必须是2到16之间
        if ( base < 2 || base > 16) {
            return 0;
        }

        int num = 0;
        int len = val.length() ;
        for (int i = 0; i < len; i++) {
            if (isValidDigit(val.charAt(i), base)) {
                int n = len - i - 1;
                int x = digitToBaseN(val.charAt(i));
                num += power(base, n ) * x;
            } else {
                num = -1;
                break;
            }
        }
        return num;
    }


    /**
     * 幂运算 m的n次方
     *   m必须都大于0 n必须大于等于0 否则返回-1
     * @param m
     * @param n
     * @return int
     */
    private static int power(int m, int n) {
        if ( m <= 0 || n < 0 ) {
            return -1;
        }

        int num = 1;
        for (int i=0;i<n;i++) {
            num *= m;
        }
        return num;
    }




    // convert digit to integer value
    private static int digitToBaseN(char digit) {
        for (int i = 0;i < digits.length; i++) {
            if ( digits[i] == digit ) {
                return  i;
            }
        }
        return -1;
    }

    private static boolean isValidDigit(char digit, int base) {
        int value = Rebaser.digitToBaseN(digit);
        // value is between 0 and F, and does not exceed the max value for a base
        // example, the value of 'A' is 10, so anything exceeding '9' is not valid in base 10
//        return value != -1 && value < base;
        return  value >= 0 && value < base;
    }

    private static boolean isValidNumber(String number, int base) {
        // guard statement: string isn't empty or null
        if (number == null || number.length() == 0) {
            return false;
        }

        // guard statement: digits are valid
        for( int i = 0 ; i < number.length(); i++ ) {
            if (!isValidDigit(number.charAt(i), base)) {
                return false;
            }
        }

        // happy path: digits are valid and the string isn't empty
        return true;
    }


    /**
     * 测试函数
     * @param args
     */
    public static void main(String[] args) {
        String s = "1234";

        Rebaser obj = new Rebaser();
        obj.setValue(s);

        System.out.println(Integer.toString(Integer.parseInt(s),5));
        System.out.println(obj.convertToBaseN(5));

        System.out.println(obj.convertToBaseTen(16));
        System.out.println(Integer.parseInt(s,16));
    }
}
